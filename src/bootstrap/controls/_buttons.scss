@use 'sass:color';
@use '../variables';
@use '../rfs';
@use '../mixins';
@use '../functions';
@use '../colors';
$prefix: 'bs-' !default;

$theme-colors: (
  'primary':    colors.$blue,
  'secondary':  colors.$gray-600,
  'success':    colors.$green,
  'info':       colors.$cyan,
  'warning':    colors.$yellow,
  'danger':     colors.$red,
  'light':      colors.$gray-100,
  'dark':       colors.$gray-900
) !default;

$color-contrast-dark:      colors.$black !default;
$color-contrast-light:     colors.$white !default;

$btn-box-shadow:              inset 0 1px 0 rgba(255, 255, 255, .15), 0 1px 1px rgba(0,0,0, .075) !default;
$btn-disabled-opacity:        .65 !default;
$btn-focus-width:             .25rem !default;
$btn-transition:              color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out !default;
$btn-active-box-shadow:       inset 0 3px 5px rgba(0,0,0, .125) !default;

$btn-hover-bg-shade-amount:       15% !default;
$btn-hover-bg-tint-amount:        15% !default;
$btn-hover-border-shade-amount:   20% !default;
$btn-hover-border-tint-amount:    10% !default;
$btn-active-bg-shade-amount:      20% !default;
$btn-active-bg-tint-amount:       20% !default;
$btn-active-border-shade-amount:  25% !default;
$btn-active-border-tint-amount:   10% !default;

@mixin button-variant(
    $background,
    $border,
    $color: functions.color-contrast($background),
    $hover-background: if($color == $color-contrast-light, functions.shade-color($background, $btn-hover-bg-shade-amount), functions.tint-color($background, $btn-hover-bg-tint-amount)),
    $hover-border: if($color == $color-contrast-light, functions.shade-color($border, $btn-hover-border-shade-amount), functions.tint-color($border, $btn-hover-border-tint-amount)),
    $hover-color: functions.color-contrast($hover-background),
    $active-background: if($color == $color-contrast-light, functions.shade-color($background, $btn-active-bg-shade-amount), functions.tint-color($background, $btn-active-bg-tint-amount)),
    $active-border: if($color == $color-contrast-light, functions.shade-color($border, $btn-active-border-shade-amount), functions.tint-color($border, $btn-active-border-tint-amount)),
    $active-color: functions.color-contrast($active-background),
    $disabled-background: $background,
    $disabled-border: $border,
    $disabled-color: functions.color-contrast($disabled-background)
) {
    --#{$prefix}btn-color: #{$color};
    --#{$prefix}btn-bg: #{$background};
    --#{$prefix}btn-border-color: #{$border};
    --#{$prefix}btn-hover-color: #{$hover-color};
    --#{$prefix}btn-hover-bg: #{$hover-background};
    --#{$prefix}btn-hover-border-color: #{$hover-border};
    --#{$prefix}btn-focus-shadow-rgb: #{functions.to-rgb(color.mix($color, $border, 15%))};
    --#{$prefix}btn-active-color: #{$active-color};
    --#{$prefix}btn-active-bg: #{$active-background};
    --#{$prefix}btn-active-border-color: #{$active-border};
    --#{$prefix}btn-active-shadow: #{$btn-active-box-shadow};
    --#{$prefix}btn-disabled-color: #{$disabled-color};
    --#{$prefix}btn-disabled-bg: #{$disabled-background};
    --#{$prefix}btn-disabled-border-color: #{$disabled-border};
}
// scss-docs-end btn-variant-mixin

// scss-docs-start btn-outline-variant-mixin
@mixin button-outline-variant(
    $color,
    $color-hover: color-contrast($color),
    $active-background: $color,
    $active-border: $color,
    $active-color: color-contrast($active-background)
) {
    --#{$prefix}btn-color: #{$color};
    --#{$prefix}btn-border-color: #{$color};
    --#{$prefix}btn-hover-color: #{$color-hover};
    --#{$prefix}btn-hover-bg: #{$active-background};
    --#{$prefix}btn-hover-border-color: #{$active-border};
    --#{$prefix}btn-focus-shadow-rgb: #{to-rgb($color)};
    --#{$prefix}btn-active-color: #{$active-color};
    --#{$prefix}btn-active-bg: #{$active-background};
    --#{$prefix}btn-active-border-color: #{$active-border};
    --#{$prefix}btn-active-shadow: #{$btn-active-box-shadow};
    --#{$prefix}btn-disabled-color: #{$color};
    --#{$prefix}btn-disabled-bg: transparent;
    --#{$prefix}btn-disabled-border-color: #{$color};
    --#{$prefix}gradient: none;
}
// scss-docs-end btn-outline-variant-mixin

// scss-docs-start btn-size-mixin
@mixin button-size($padding-y, $padding-x, $font-size, $border-radius) {
    --#{$prefix}btn-padding-y: #{$padding-y};
    --#{$prefix}btn-padding-x: #{$padding-x};
    @include rfs($font-size, --#{$prefix}btn-font-size);
    --#{$prefix}btn-border-radius: #{$border-radius};
}


.btn {
    // scss-docs-start btn-css-vars
    --#{$prefix}btn-padding-x: #{variables.$btn-padding-x};
    --#{$prefix}btn-padding-y: #{variables.$btn-padding-y};
    @include rfs.rfs(variables.$btn-font-size, --#{$prefix}btn-font-size);
    --#{$prefix}btn-font-weight: #{variables.$btn-font-weight};
    --#{$prefix}btn-line-height: #{variables.$btn-line-height};
    --#{$prefix}btn-color: var(--#{$prefix}body-text);
    --#{$prefix}btn-bg: transparent;
    --#{$prefix}btn-border-width: #{variables.$btn-border-width};
    --#{$prefix}btn-border-color: transparent;
    --#{$prefix}btn-border-radius: #{variables.$btn-border-radius};
    --#{$prefix}btn-hover-border-color: transparent;
    --#{$prefix}btn-box-shadow: #{$btn-box-shadow};
    --#{$prefix}btn-disabled-opacity: #{$btn-disabled-opacity};
    --#{$prefix}btn-focus-box-shadow: 0 0 0 #{$btn-focus-width} rgba(var(--#{$prefix}btn-focus-shadow-rgb), .5);
    // scss-docs-end btn-css-vars

    display: inline-block;
    padding: var(--#{$prefix}btn-padding-y) var(--#{$prefix}btn-padding-x);
    font-family: var(--#{$prefix}btn-font-family);
    @include rfs.font-size(var(--#{$prefix}btn-font-size));
    font-weight: var(--#{$prefix}btn-font-weight);
    line-height: var(--#{$prefix}btn-line-height);
    color: var(--#{$prefix}btn-color);
    text-align: center;
    text-decoration: none;
    white-space: null;
    vertical-align: middle;
    cursor: pointer;
    user-select: none;
    border: var(--#{$prefix}btn-border-width) solid var(--#{$prefix}btn-border-color);
    @include mixins.border-radius(var(--#{$prefix}btn-border-radius));
    @include mixins.gradient-bg(var(--#{$prefix}btn-bg));
    @include mixins.box-shadow(var(--#{$prefix}btn-box-shadow));
    @include mixins.transition($btn-transition);

    &:hover {
        color: var(--#{$prefix}btn-hover-color);
        text-decoration: none;
        background-color: var(--#{$prefix}btn-hover-bg);
        border-color: var(--#{$prefix}btn-hover-border-color);
    }

    .btn-check + &:hover {
        // override for the checkbox/radio buttons
        color: var(--#{$prefix}btn-color);
        background-color: var(--#{$prefix}btn-bg);
        border-color: var(--#{$prefix}btn-border-color);
    }

    &:focus-visible {
        color: var(--#{$prefix}btn-hover-color);
        @include mixins.gradient-bg(var(--#{$prefix}btn-hover-bg));
        border-color: var(--#{$prefix}btn-hover-border-color);
        outline: 0;
        // Avoid using mixin so we can pass custom focus shadow properly
        box-shadow: var(--#{$prefix}btn-box-shadow), var(--#{$prefix}btn-focus-box-shadow);
    }

    .btn-check:focus-visible + & {
        border-color: var(--#{$prefix}btn-hover-border-color);
        outline: 0;
        // Avoid using mixin so we can pass custom focus shadow properly
        box-shadow: var(--#{$prefix}btn-box-shadow), var(--#{$prefix}btn-focus-box-shadow);
    }

    .btn-check:checked + &,
    :not(.btn-check) + &:active,
    &:first-child:active,
    &.active,
    &.show {
        color: var(--#{$prefix}btn-active-color);
        background-color: var(--#{$prefix}btn-active-bg);
        // Remove CSS gradients if they're enabled
        background-image: none;
        border-color: var(--#{$prefix}btn-active-border-color);
        @include mixins.box-shadow(var(--#{$prefix}btn-active-shadow));

        &:focus-visible {
            // Avoid using mixin so we can pass custom focus shadow properly
            box-shadow: var(--#{$prefix}btn-active-shadow), var(--#{$prefix}btn-focus-box-shadow);
        }
    }

    .btn-check:checked:focus-visible + & {
        // Avoid using mixin so we can pass custom focus shadow properly
        box-shadow: var(--#{$prefix}btn-active-shadow), var(--#{$prefix}btn-focus-box-shadow);
    }

    &:disabled,
    &.disabled,
    fieldset:disabled & {
        color: var(--#{$prefix}btn-disabled-color);
        pointer-events: none;
        background-color: var(--#{$prefix}btn-disabled-bg);
        background-image: none;
        border-color: var(--#{$prefix}btn-disabled-border-color);
        opacity: var(--#{$prefix}btn-disabled-opacity);
        @include mixins.box-shadow(none);
    }
}


//
// Alternate buttons
//

// scss-docs-start btn-variant-loops
@each $color, $value in $theme-colors {
    .btn-#{$color} {
        @if $color == "light" {
            @include button-variant(
                $value,
                $value,
                $hover-background: functions.shade-color($value, $btn-hover-bg-shade-amount),
                $hover-border: functions.shade-color($value, $btn-hover-border-shade-amount),
                $active-background: functions.shade-color($value, $btn-active-bg-shade-amount),
                $active-border: functions.shade-color($value, $btn-active-border-shade-amount)
            );
        } @else if $color == "dark" {
            @include button-variant(
                $value,
                $value,
                $hover-background: functions.tint-color($value, $btn-hover-bg-tint-amount),
                $hover-border: functions.tint-color($value, $btn-hover-border-tint-amount),
                $active-background: functions.tint-color($value, $btn-active-bg-tint-amount),
                $active-border: functions.tint-color($value, $btn-active-border-tint-amount)
            );
        } @else {
            @include button-variant($value, $value);
        }
    }
}

@each $color, $value in $theme-colors {
    .btn-outline-#{$color} {
        @include button-outline-variant($value);
    }
}


.btn-group,
.btn-group-vertical {
    position: relative;
    display: inline-flex;
    vertical-align: middle; // match .btn alignment given font-size hack above

    > .btn {
        position: relative;
        flex: 1 1 auto;
    }

    // Bring the hover, focused, and "active" buttons to the front to overlay
    // the borders properly
    > .btn-check:checked + .btn,
    > .btn-check:focus + .btn,
    > .btn:hover,
    > .btn:focus,
    > .btn:active,
    > .btn.active {
        z-index: 1;
    }
}

// Optional: Group multiple button groups together for a toolbar
.btn-toolbar {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-start;

    .input-group {
        width: auto;
    }
}

.btn-group {
    @include mixins.border-radius(variables.$btn-border-radius);

    // Prevent double borders when buttons are next to each other
    > :not(.btn-check:first-child) + .btn,
    > .btn-group:not(:first-child) {
        margin-left: calc(-1 * #{variables.$btn-border-width}); // stylelint-disable-line function-disallowed-list
    }

    // Reset rounded corners
    > .btn:not(:last-child):not(.dropdown-toggle),
    > .btn.dropdown-toggle-split:first-child,
    > .btn-group:not(:last-child) > .btn {
        @include mixins.border-end-radius(0);
    }

    // The left radius should be 0 if the button is:
    // - the "third or more" child
    // - the second child and the previous element isn't `.btn-check` (making it the first child visually)
    // - part of a btn-group which isn't the first child
    > .btn:nth-child(n + 3),
    > :not(.btn-check) + .btn,
    > .btn-group:not(:first-child) > .btn {
        @include mixins.border-start-radius(0);
    }
}


@each $color, $value in $theme-colors {
    .text-#{$color} {
        --#{$prefix}table-color: var(--#{$prefix}#{$color});
        color: var(--#{$prefix}#{$color});
    }
}